{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nimport { Component } from '@angular/core';\nimport { ImportsModule } from './imports';\nimport { Cidade } from '@domain/cidade';\nimport { ProjetoService } from '@service/projeto-service';\nimport { CadastrarCidade } from './cadastrar-cidade';\nimport { MessageService } from 'primeng/api';\n//-------------------------------------------------------------------------------------\n/** Tela para listar cidades */\n//-------------------------------------------------------------------------------------\nlet ListarCidades = class ListarCidades {\n  service;\n  messageService;\n  //-------------------------------------------------------\n  // Lista de cidades, exibida na tabela\n  //-------------------------------------------------------\n  listaCidades;\n  //-------------------------------------------------------------\n  // Atributo que guarda a cidade que foi selecionada na tabela\n  //-------------------------------------------------------------\n  cidadeSelecionada = new Cidade();\n  //-------------------------------------------------------------\n  // Flag usada para mostrar/esconder a janela de cadastro\n  //-------------------------------------------------------------\n  mostraJanelaCadastro = false;\n  //--------------------------------------------------------------\n  /** Construtor. Recebe os services usados pelo componente */\n  //--------------------------------------------------------------\n  constructor(service, messageService) {\n    this.service = service;\n    this.messageService = messageService;\n  }\n  //-------------------------------------------------------------------------------------\n  /** Inicializacao do componente. Recupera a lista de cidades para exibir na tabela */\n  //-------------------------------------------------------------------------------------\n  ngOnInit() {\n    this.pesquisarCidades();\n  }\n  //-------------------------------------------------------------------------------------\n  /** Método chamado para recuperar cidades para a tabela */\n  //-------------------------------------------------------------------------------------\n  pesquisarCidades() {}\n  //-------------------------------------------------------------------------------------\n  /** Método chamado ao clicar no botão 'Nova Cidade' */\n  //-------------------------------------------------------------------------------------\n  abreJanelaParaCadastrarNovaCidade() {\n    // Define a cidade selecionada como uma nova cidade\n    this.cidadeSelecionada = new Cidade();\n    // Exibe a janela de cadastro\n    this.mostraJanelaCadastro = true;\n  }\n  //-------------------------------------------------------------------------------------\n  /** Método chamado ao clicar no botão 'Alterar' */\n  //-------------------------------------------------------------------------------------\n  abreJanelaParaAlterarCidade(cidade) {\n    // Copia os dados da cidade selecionada para uma nova cidade\n    this.cidadeSelecionada = new Cidade();\n    this.cidadeSelecionada.id = cidade.id;\n    this.cidadeSelecionada.nome = cidade.nome;\n    this.cidadeSelecionada.uf = cidade.uf;\n    this.cidadeSelecionada.capital = cidade.capital;\n    // Exibe a janela de cadastro\n    this.mostraJanelaCadastro = true;\n  }\n  //-------------------------------------------------------------------------------------\n  /** Método chamado ao clicar no botão 'Excluir' */\n  //-------------------------------------------------------------------------------------\n  excluir(cidade) {\n    // Chama o backend para excluir a cidade selecionada\n    this.service.excluir(cidade).subscribe(retorno => {\n      this.messageService.add({\n        severity: 'success',\n        summary: 'Info',\n        detail: `Cidade '${cidade.nome}' excluída com sucesso!`\n      });\n      // Atualiza a lista de cidades\n      setTimeout(() => this.pesquisarCidades(), 100);\n    });\n  }\n  //-------------------------------------------------------------------------------------\n  /** Método chamado quando a janela de cadastro é fechada */\n  //-------------------------------------------------------------------------------------\n  fechaJanelaCadastro(salvou) {\n    // Esconde a janela de cadastro\n    this.mostraJanelaCadastro = false;\n    // Se salvou, atualiza a lista de cidades\n    if (salvou) {\n      setTimeout(() => this.pesquisarCidades(), 100);\n    }\n  }\n};\nListarCidades = __decorate([Component({\n  selector: 'listar-cidades',\n  templateUrl: 'listar-cidades.html',\n  standalone: true,\n  imports: [ImportsModule, CadastrarCidade],\n  providers: [ProjetoService, MessageService]\n}), __metadata(\"design:paramtypes\", [ProjetoService, MessageService])], ListarCidades);\nexport { ListarCidades };","map":{"version":3,"names":["Component","ImportsModule","Cidade","ProjetoService","CadastrarCidade","MessageService","ListarCidades","service","messageService","listaCidades","cidadeSelecionada","mostraJanelaCadastro","constructor","ngOnInit","pesquisarCidades","abreJanelaParaCadastrarNovaCidade","abreJanelaParaAlterarCidade","cidade","id","nome","uf","capital","excluir","subscribe","retorno","add","severity","summary","detail","setTimeout","fechaJanelaCadastro","salvou","__decorate","selector","templateUrl","standalone","imports","providers"],"sources":["C:\\Users\\gusta\\Downloads\\desafio_estagiarios_1_2025\\desafio_estagiarios_1_2025\\desafio-técnico\\frontend-angular\\src\\app\\listar-cidades.ts"],"sourcesContent":["import {Component} from '@angular/core';\r\nimport {ImportsModule} from './imports';\r\nimport {Cidade} from '@domain/cidade';\r\nimport {ProjetoService} from '@service/projeto-service';\r\nimport {CadastrarCidade} from './cadastrar-cidade';\r\nimport {MessageService} from 'primeng/api';\r\n\r\n//-------------------------------------------------------------------------------------\r\n/** Tela para listar cidades */\r\n//-------------------------------------------------------------------------------------\r\n@Component({\r\n    selector: 'listar-cidades',\r\n    templateUrl: 'listar-cidades.html',\r\n    standalone: true,\r\n    imports: [ImportsModule, CadastrarCidade],\r\n    providers: [ProjetoService, MessageService]\r\n})\r\nexport class ListarCidades {\r\n    //-------------------------------------------------------\r\n    // Lista de cidades, exibida na tabela\r\n    //-------------------------------------------------------\r\n    listaCidades!: Cidade[];\r\n\r\n    //-------------------------------------------------------------\r\n    // Atributo que guarda a cidade que foi selecionada na tabela\r\n    //-------------------------------------------------------------\r\n    cidadeSelecionada: Cidade = new Cidade();\r\n\r\n    //-------------------------------------------------------------\r\n    // Flag usada para mostrar/esconder a janela de cadastro\r\n    //-------------------------------------------------------------\r\n    mostraJanelaCadastro: boolean = false;\r\n\r\n    //--------------------------------------------------------------\r\n    /** Construtor. Recebe os services usados pelo componente */\r\n    //--------------------------------------------------------------\r\n    constructor(private service: ProjetoService, private messageService: MessageService) {}\r\n\r\n    //-------------------------------------------------------------------------------------\r\n    /** Inicializacao do componente. Recupera a lista de cidades para exibir na tabela */\r\n    //-------------------------------------------------------------------------------------\r\n    ngOnInit() {\r\n        this.pesquisarCidades();\r\n    }\r\n\r\n    //-------------------------------------------------------------------------------------\r\n    /** Método chamado para recuperar cidades para a tabela */\r\n    //-------------------------------------------------------------------------------------\r\n    private pesquisarCidades(): void {\r\n        \r\n    }\r\n\r\n    //-------------------------------------------------------------------------------------\r\n    /** Método chamado ao clicar no botão 'Nova Cidade' */\r\n    //-------------------------------------------------------------------------------------\r\n    public abreJanelaParaCadastrarNovaCidade() {\r\n        // Define a cidade selecionada como uma nova cidade\r\n        this.cidadeSelecionada = new Cidade();\r\n\r\n        // Exibe a janela de cadastro\r\n        this.mostraJanelaCadastro = true;\r\n    }\r\n\r\n    //-------------------------------------------------------------------------------------\r\n    /** Método chamado ao clicar no botão 'Alterar' */\r\n    //-------------------------------------------------------------------------------------\r\n    public abreJanelaParaAlterarCidade(cidade: Cidade): void {\r\n        // Copia os dados da cidade selecionada para uma nova cidade\r\n        this.cidadeSelecionada = new Cidade();\r\n        this.cidadeSelecionada.id = cidade.id;\r\n        this.cidadeSelecionada.nome = cidade.nome;\r\n        this.cidadeSelecionada.uf = cidade.uf;\r\n        this.cidadeSelecionada.capital = cidade.capital;\r\n\r\n        // Exibe a janela de cadastro\r\n        this.mostraJanelaCadastro = true;\r\n    }\r\n\r\n    //-------------------------------------------------------------------------------------\r\n    /** Método chamado ao clicar no botão 'Excluir' */\r\n    //-------------------------------------------------------------------------------------\r\n    public excluir(cidade: Cidade) {\r\n        // Chama o backend para excluir a cidade selecionada\r\n        this.service.excluir(cidade).subscribe((retorno) => {\r\n            this.messageService.add({ severity: 'success', summary: 'Info', detail: `Cidade '${cidade.nome}' excluída com sucesso!` });\r\n\r\n            // Atualiza a lista de cidades\r\n            setTimeout(() => this.pesquisarCidades(), 100);\r\n        }) ;\r\n    }\r\n\r\n    //-------------------------------------------------------------------------------------\r\n    /** Método chamado quando a janela de cadastro é fechada */\r\n    //-------------------------------------------------------------------------------------\r\n    public fechaJanelaCadastro(salvou: boolean): void {\r\n        // Esconde a janela de cadastro\r\n        this.mostraJanelaCadastro = false;\r\n\r\n        // Se salvou, atualiza a lista de cidades\r\n        if(salvou) {\r\n           setTimeout(() => this.pesquisarCidades(), 100);\r\n        }\r\n    }\r\n\r\n}\r\n"],"mappings":";;;;;;;;;;AAAA,SAAQA,SAAS,QAAO,eAAe;AACvC,SAAQC,aAAa,QAAO,WAAW;AACvC,SAAQC,MAAM,QAAO,gBAAgB;AACrC,SAAQC,cAAc,QAAO,0BAA0B;AACvD,SAAQC,eAAe,QAAO,oBAAoB;AAClD,SAAQC,cAAc,QAAO,aAAa;AAE1C;AACA;AACA;AAQO,IAAMC,aAAa,GAAnB,MAAMA,aAAa;EAmBFC,OAAA;EAAiCC,cAAA;EAlBrD;EACA;EACA;EACAC,YAAY;EAEZ;EACA;EACA;EACAC,iBAAiB,GAAW,IAAIR,MAAM,EAAE;EAExC;EACA;EACA;EACAS,oBAAoB,GAAY,KAAK;EAErC;EACA;EACA;EACAC,YAAoBL,OAAuB,EAAUC,cAA8B;IAA/D,KAAAD,OAAO,GAAPA,OAAO;IAA0B,KAAAC,cAAc,GAAdA,cAAc;EAAmB;EAEtF;EACA;EACA;EACAK,QAAQA,CAAA;IACJ,IAAI,CAACC,gBAAgB,EAAE;EAC3B;EAEA;EACA;EACA;EACQA,gBAAgBA,CAAA,GAExB;EAEA;EACA;EACA;EACOC,iCAAiCA,CAAA;IACpC;IACA,IAAI,CAACL,iBAAiB,GAAG,IAAIR,MAAM,EAAE;IAErC;IACA,IAAI,CAACS,oBAAoB,GAAG,IAAI;EACpC;EAEA;EACA;EACA;EACOK,2BAA2BA,CAACC,MAAc;IAC7C;IACA,IAAI,CAACP,iBAAiB,GAAG,IAAIR,MAAM,EAAE;IACrC,IAAI,CAACQ,iBAAiB,CAACQ,EAAE,GAAGD,MAAM,CAACC,EAAE;IACrC,IAAI,CAACR,iBAAiB,CAACS,IAAI,GAAGF,MAAM,CAACE,IAAI;IACzC,IAAI,CAACT,iBAAiB,CAACU,EAAE,GAAGH,MAAM,CAACG,EAAE;IACrC,IAAI,CAACV,iBAAiB,CAACW,OAAO,GAAGJ,MAAM,CAACI,OAAO;IAE/C;IACA,IAAI,CAACV,oBAAoB,GAAG,IAAI;EACpC;EAEA;EACA;EACA;EACOW,OAAOA,CAACL,MAAc;IACzB;IACA,IAAI,CAACV,OAAO,CAACe,OAAO,CAACL,MAAM,CAAC,CAACM,SAAS,CAAEC,OAAO,IAAI;MAC/C,IAAI,CAAChB,cAAc,CAACiB,GAAG,CAAC;QAAEC,QAAQ,EAAE,SAAS;QAAEC,OAAO,EAAE,MAAM;QAAEC,MAAM,EAAE,WAAWX,MAAM,CAACE,IAAI;MAAyB,CAAE,CAAC;MAE1H;MACAU,UAAU,CAAC,MAAM,IAAI,CAACf,gBAAgB,EAAE,EAAE,GAAG,CAAC;IAClD,CAAC,CAAC;EACN;EAEA;EACA;EACA;EACOgB,mBAAmBA,CAACC,MAAe;IACtC;IACA,IAAI,CAACpB,oBAAoB,GAAG,KAAK;IAEjC;IACA,IAAGoB,MAAM,EAAE;MACRF,UAAU,CAAC,MAAM,IAAI,CAACf,gBAAgB,EAAE,EAAE,GAAG,CAAC;IACjD;EACJ;CAEH;AAvFYR,aAAa,GAAA0B,UAAA,EAPzBhC,SAAS,CAAC;EACPiC,QAAQ,EAAE,gBAAgB;EAC1BC,WAAW,EAAE,qBAAqB;EAClCC,UAAU,EAAE,IAAI;EAChBC,OAAO,EAAE,CAACnC,aAAa,EAAEG,eAAe,CAAC;EACzCiC,SAAS,EAAE,CAAClC,cAAc,EAAEE,cAAc;CAC7C,CAAC,E,iCAoB+BF,cAAc,EAA0BE,cAAc,G,EAnB1EC,aAAa,CAuFzB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}