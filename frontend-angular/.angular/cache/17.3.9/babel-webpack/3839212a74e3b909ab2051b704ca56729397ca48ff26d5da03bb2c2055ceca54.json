{"ast":null,"code":"import { ImportsModule } from './imports';\nimport { Cidade } from '@domain/cidade';\nimport { ProjetoService } from '@service/projeto-service';\nimport { CadastrarCidade } from './cadastrar-cidade';\nimport { MessageService } from 'primeng/api';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@service/projeto-service\";\nimport * as i2 from \"primeng/api\";\nimport * as i3 from \"primeng/button\";\nimport * as i4 from \"@angular/common\";\nimport * as i5 from \"primeng/table\";\nimport * as i6 from \"primeng/toast\";\nconst _c0 = () => ({\n  \"min-width\": \"50rem\"\n});\nconst _c1 = () => [5, 10, 20];\nfunction ListarCidades_ng_template_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\")(1, \"th\");\n    i0.ɵɵtext(2, \"Code\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"th\");\n    i0.ɵɵtext(4, \"Nome\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"th\");\n    i0.ɵɵtext(6, \"UF\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"th\");\n    i0.ɵɵtext(8, \"Capital\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"th\");\n    i0.ɵɵtext(10, \"A\\u00E7\\u00E3o\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction ListarCidades_ng_template_6_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r1 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"tr\")(1, \"td\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"td\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"td\");\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"td\");\n    i0.ɵɵtext(8);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"td\", 6)(10, \"p-button\", 7);\n    i0.ɵɵlistener(\"click\", function ListarCidades_ng_template_6_Template_p_button_click_10_listener() {\n      const cidade_r2 = i0.ɵɵrestoreView(_r1).$implicit;\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.abreJanelaParaAlterarCidade(cidade_r2));\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(11, \" \\u00A0 \");\n    i0.ɵɵelementStart(12, \"p-button\", 8);\n    i0.ɵɵlistener(\"click\", function ListarCidades_ng_template_6_Template_p_button_click_12_listener() {\n      const cidade_r2 = i0.ɵɵrestoreView(_r1).$implicit;\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.excluir(cidade_r2));\n    });\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const cidade_r2 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(cidade_r2.id);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(cidade_r2.nome);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(cidade_r2.uf);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(cidade_r2.capital ? \"Sim\" : \"N\\u00E3o\");\n  }\n}\nfunction ListarCidades_cadastrar_cidade_8_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"cadastrar-cidade\", 9);\n    i0.ɵɵlistener(\"onClose\", function ListarCidades_cadastrar_cidade_8_Template_cadastrar_cidade_onClose_0_listener($event) {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.fechaJanelaCadastro($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"cidade\", ctx_r2.cidadeSelecionada);\n  }\n}\n//-------------------------------------------------------------------------------------\n/** Tela para listar cidades */\n//-------------------------------------------------------------------------------------\nexport class ListarCidades {\n  service;\n  messageService;\n  //-------------------------------------------------------\n  // Lista de cidades, exibida na tabela\n  //-------------------------------------------------------\n  listaCidades;\n  //-------------------------------------------------------------\n  // Atributo que guarda a cidade que foi selecionada na tabela\n  //-------------------------------------------------------------\n  cidadeSelecionada = new Cidade();\n  //-------------------------------------------------------------\n  // Flag usada para mostrar/esconder a janela de cadastro\n  //-------------------------------------------------------------\n  mostraJanelaCadastro = false;\n  //--------------------------------------------------------------\n  /** Construtor. Recebe os services usados pelo componente */\n  //--------------------------------------------------------------\n  constructor(service, messageService) {\n    this.service = service;\n    this.messageService = messageService;\n  }\n  //-------------------------------------------------------------------------------------\n  /** Inicializacao do componente. Recupera a lista de cidades para exibir na tabela */\n  //-------------------------------------------------------------------------------------\n  ngOnInit() {\n    this.pesquisarCidades();\n  }\n  //-------------------------------------------------------------------------------------\n  /** Método chamado para recuperar cidades para a tabela */\n  //-------------------------------------------------------------------------------------\n  pesquisarCidades() {\n    this.service.pesquisarCidades().subscribe({\n      next: cidades => {\n        this.listaCidades = cidades;\n      },\n      error: erro => {\n        console.error(\"Erro ao buscar cidades:\", erro);\n        this.messageService.add({\n          severity: 'error',\n          summary: 'Erro',\n          detail: 'Erro ao carregar a lista de cidades!'\n        });\n      }\n    });\n  }\n  //-------------------------------------------------------------------------------------\n  /** Método chamado ao clicar no botão 'Nova Cidade' */\n  //-------------------------------------------------------------------------------------\n  abreJanelaParaCadastrarNovaCidade() {\n    // Define a cidade selecionada como uma nova cidade\n    this.cidadeSelecionada = new Cidade();\n    // Exibe a janela de cadastro\n    this.mostraJanelaCadastro = true;\n  }\n  //-------------------------------------------------------------------------------------\n  /** Método chamado ao clicar no botão 'Alterar' */\n  //-------------------------------------------------------------------------------------\n  abreJanelaParaAlterarCidade(cidade) {\n    // Copia os dados da cidade selecionada para uma nova cidade\n    this.cidadeSelecionada = new Cidade();\n    this.cidadeSelecionada.id = cidade.id;\n    this.cidadeSelecionada.nome = cidade.nome;\n    this.cidadeSelecionada.uf = cidade.uf;\n    this.cidadeSelecionada.capital = cidade.capital;\n    // Exibe a janela de cadastro\n    this.mostraJanelaCadastro = true;\n  }\n  //-------------------------------------------------------------------------------------\n  /** Método chamado ao clicar no botão 'Excluir' */\n  //-------------------------------------------------------------------------------------\n  excluir(cidade) {\n    // Chama o backend para excluir a cidade selecionada\n    this.service.excluir(cidade).subscribe({\n      next: () => {\n        this.messageService.add({\n          severity: 'success',\n          summary: 'Info',\n          detail: `Cidade '${cidade.nome}' excluída com sucesso!`\n        });\n        setTimeout(() => this.pesquisarCidades(), 100);\n      },\n      error: () => {\n        this.messageService.add({\n          severity: 'error',\n          summary: 'Erro',\n          detail: `Erro ao excluir a cidade '${cidade.nome}'!`\n        });\n      }\n    });\n  }\n  //-------------------------------------------------------------------------------------\n  /** Método chamado quando a janela de cadastro é fechada */\n  //-------------------------------------------------------------------------------------\n  fechaJanelaCadastro(salvou) {\n    // Esconde a janela de cadastro\n    this.mostraJanelaCadastro = false;\n    // Se salvou, atualiza a lista de cidades\n    if (salvou) {\n      setTimeout(() => this.pesquisarCidades(), 100);\n    }\n  }\n  static ɵfac = function ListarCidades_Factory(t) {\n    return new (t || ListarCidades)(i0.ɵɵdirectiveInject(i1.ProjetoService), i0.ɵɵdirectiveInject(i2.MessageService));\n  };\n  static ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ListarCidades,\n    selectors: [[\"listar-cidades\"]],\n    standalone: true,\n    features: [i0.ɵɵProvidersFeature([ProjetoService, MessageService]), i0.ɵɵStandaloneFeature],\n    decls: 9,\n    vars: 10,\n    consts: [[1, \"card\", \"justify-content-center\"], [\"styleClass\", \"p-datatable-gridlines\", 3, \"value\", \"paginator\", \"rows\", \"tableStyle\", \"rowsPerPageOptions\"], [\"pTemplate\", \"header\"], [\"pTemplate\", \"body\"], [\"label\", \"Nova Cidade\", 3, \"click\"], [3, \"cidade\", \"onClose\", 4, \"ngIf\"], [2, \"width\", \"250px\"], [\"label\", \"Alterar\", 3, \"click\"], [\"label\", \"Excluir\", 3, \"click\"], [3, \"onClose\", \"cidade\"]],\n    template: function ListarCidades_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵelement(1, \"p-toast\");\n        i0.ɵɵelementStart(2, \"h2\");\n        i0.ɵɵtext(3, \"Lista de Cidades\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"p-table\", 1);\n        i0.ɵɵtemplate(5, ListarCidades_ng_template_5_Template, 11, 0, \"ng-template\", 2)(6, ListarCidades_ng_template_6_Template, 13, 4, \"ng-template\", 3);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(7, \"p-button\", 4);\n        i0.ɵɵlistener(\"click\", function ListarCidades_Template_p_button_click_7_listener() {\n          return ctx.abreJanelaParaCadastrarNovaCidade();\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(8, ListarCidades_cadastrar_cidade_8_Template, 1, 1, \"cadastrar-cidade\", 5);\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"value\", ctx.listaCidades)(\"paginator\", true)(\"rows\", 5)(\"tableStyle\", i0.ɵɵpureFunction0(7, _c0))(\"rowsPerPageOptions\", i0.ɵɵpureFunction0(8, _c1))(\"tableStyle\", i0.ɵɵpureFunction0(9, _c0));\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngIf\", ctx.mostraJanelaCadastro);\n      }\n    },\n    dependencies: [ImportsModule, i2.PrimeTemplate, i3.Button, i4.NgIf, i5.Table, i6.Toast, CadastrarCidade],\n    encapsulation: 2\n  });\n}","map":{"version":3,"names":["ImportsModule","Cidade","ProjetoService","CadastrarCidade","MessageService","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵlistener","ListarCidades_ng_template_6_Template_p_button_click_10_listener","cidade_r2","ɵɵrestoreView","_r1","$implicit","ctx_r2","ɵɵnextContext","ɵɵresetView","abreJanelaParaAlterarCidade","ListarCidades_ng_template_6_Template_p_button_click_12_listener","excluir","ɵɵadvance","ɵɵtextInterpolate","id","nome","uf","capital","ListarCidades_cadastrar_cidade_8_Template_cadastrar_cidade_onClose_0_listener","$event","_r4","fechaJanelaCadastro","ɵɵproperty","cidadeSelecionada","ListarCidades","service","messageService","listaCidades","mostraJanelaCadastro","constructor","ngOnInit","pesquisarCidades","subscribe","next","cidades","error","erro","console","add","severity","summary","detail","abreJanelaParaCadastrarNovaCidade","cidade","setTimeout","salvou","ɵɵdirectiveInject","i1","i2","selectors","standalone","features","ɵɵProvidersFeature","ɵɵStandaloneFeature","decls","vars","consts","template","ListarCidades_Template","rf","ctx","ɵɵelement","ɵɵtemplate","ListarCidades_ng_template_5_Template","ListarCidades_ng_template_6_Template","ListarCidades_Template_p_button_click_7_listener","ListarCidades_cadastrar_cidade_8_Template","ɵɵpureFunction0","_c0","_c1","PrimeTemplate","i3","Button","i4","NgIf","i5","Table","i6","Toast","encapsulation"],"sources":["C:\\Users\\gusta\\Downloads\\desafio_estagiarios_1_2025\\desafio_estagiarios_1_2025\\desafio-técnico\\frontend-angular\\src\\app\\listar-cidades.ts","C:\\Users\\gusta\\Downloads\\desafio_estagiarios_1_2025\\desafio_estagiarios_1_2025\\desafio-técnico\\frontend-angular\\src\\app\\listar-cidades.html"],"sourcesContent":["import {Component} from '@angular/core';\r\nimport {ImportsModule} from './imports';\r\nimport {Cidade} from '@domain/cidade';\r\nimport {ProjetoService} from '@service/projeto-service';\r\nimport {CadastrarCidade} from './cadastrar-cidade';\r\nimport {MessageService} from 'primeng/api';\r\n\r\n//-------------------------------------------------------------------------------------\r\n/** Tela para listar cidades */\r\n//-------------------------------------------------------------------------------------\r\n@Component({\r\n    selector: 'listar-cidades',\r\n    templateUrl: 'listar-cidades.html',\r\n    standalone: true,\r\n    imports: [ImportsModule, CadastrarCidade],\r\n    providers: [ProjetoService, MessageService]\r\n})\r\nexport class ListarCidades {\r\n    //-------------------------------------------------------\r\n    // Lista de cidades, exibida na tabela\r\n    //-------------------------------------------------------\r\n    listaCidades!: Cidade[];\r\n\r\n    //-------------------------------------------------------------\r\n    // Atributo que guarda a cidade que foi selecionada na tabela\r\n    //-------------------------------------------------------------\r\n    cidadeSelecionada: Cidade = new Cidade();\r\n\r\n    //-------------------------------------------------------------\r\n    // Flag usada para mostrar/esconder a janela de cadastro\r\n    //-------------------------------------------------------------\r\n    mostraJanelaCadastro: boolean = false;\r\n\r\n    //--------------------------------------------------------------\r\n    /** Construtor. Recebe os services usados pelo componente */\r\n    //--------------------------------------------------------------\r\n    constructor(private service: ProjetoService, private messageService: MessageService) {}\r\n\r\n    //-------------------------------------------------------------------------------------\r\n    /** Inicializacao do componente. Recupera a lista de cidades para exibir na tabela */\r\n    //-------------------------------------------------------------------------------------\r\n    ngOnInit() {\r\n        this.pesquisarCidades();\r\n    }\r\n\r\n    //-------------------------------------------------------------------------------------\r\n    /** Método chamado para recuperar cidades para a tabela */\r\n    //-------------------------------------------------------------------------------------\r\n    private pesquisarCidades(): void {\r\n        this.service.pesquisarCidades().subscribe({\r\n            next: (cidades) => {\r\n                this.listaCidades = cidades;\r\n            },\r\n            error: (erro) => {\r\n                console.error(\"Erro ao buscar cidades:\", erro);\r\n                this.messageService.add({ severity: 'error', summary: 'Erro', detail: 'Erro ao carregar a lista de cidades!' });\r\n            }\r\n        });\r\n    }\r\n\r\n    //-------------------------------------------------------------------------------------\r\n    /** Método chamado ao clicar no botão 'Nova Cidade' */\r\n    //-------------------------------------------------------------------------------------\r\n    public abreJanelaParaCadastrarNovaCidade() {\r\n        // Define a cidade selecionada como uma nova cidade\r\n        this.cidadeSelecionada = new Cidade();\r\n\r\n        // Exibe a janela de cadastro\r\n        this.mostraJanelaCadastro = true;\r\n    }\r\n\r\n    //-------------------------------------------------------------------------------------\r\n    /** Método chamado ao clicar no botão 'Alterar' */\r\n    //-------------------------------------------------------------------------------------\r\n    public abreJanelaParaAlterarCidade(cidade: Cidade): void {\r\n        // Copia os dados da cidade selecionada para uma nova cidade\r\n        this.cidadeSelecionada = new Cidade();\r\n        this.cidadeSelecionada.id = cidade.id;\r\n        this.cidadeSelecionada.nome = cidade.nome;\r\n        this.cidadeSelecionada.uf = cidade.uf;\r\n        this.cidadeSelecionada.capital = cidade.capital;\r\n\r\n        // Exibe a janela de cadastro\r\n        this.mostraJanelaCadastro = true;\r\n    }\r\n\r\n    //-------------------------------------------------------------------------------------\r\n    /** Método chamado ao clicar no botão 'Excluir' */\r\n    //-------------------------------------------------------------------------------------\r\n    public excluir(cidade: Cidade) {\r\n        // Chama o backend para excluir a cidade selecionada\r\n        this.service.excluir(cidade).subscribe({\r\n            next: () => {\r\n                this.messageService.add({ severity: 'success', summary: 'Info', detail: `Cidade '${cidade.nome}' excluída com sucesso!` });\r\n                setTimeout(() => this.pesquisarCidades(), 100);\r\n            },\r\n            error: () => {\r\n                this.messageService.add({ severity: 'error', summary: 'Erro', detail: `Erro ao excluir a cidade '${cidade.nome}'!` });\r\n            }\r\n        });\r\n    }\r\n\r\n    //-------------------------------------------------------------------------------------\r\n    /** Método chamado quando a janela de cadastro é fechada */\r\n    //-------------------------------------------------------------------------------------\r\n    public fechaJanelaCadastro(salvou: boolean): void {\r\n        // Esconde a janela de cadastro\r\n        this.mostraJanelaCadastro = false;\r\n\r\n        // Se salvou, atualiza a lista de cidades\r\n        if (salvou) {\r\n            setTimeout(() => this.pesquisarCidades(), 100);\r\n        }\r\n    }\r\n}\r\n","<div class=\"card justify-content-center\">\r\n    <p-toast />\r\n    <h2>Lista de Cidades</h2>\r\n\r\n    <!-- Tabela que mostra as cidades cadastradas -->\r\n    <p-table\r\n        [value]=\"listaCidades\"\r\n        [paginator]=\"true\"\r\n        [rows]=\"5\"\r\n        [tableStyle]=\"{ 'min-width': '50rem' }\"\r\n        [rowsPerPageOptions]=\"[5, 10, 20]\"\r\n        styleClass=\"p-datatable-gridlines\"\r\n        [tableStyle]=\"{ 'min-width': '50rem' }\"\r\n    >\r\n        <ng-template pTemplate=\"header\">\r\n            <tr>\r\n                <th>Code</th>\r\n                <th>Nome</th>\r\n                <th>UF</th>\r\n                <th>Capital</th>\r\n                <th>Ação</th>\r\n            </tr>\r\n        </ng-template>\r\n        <ng-template pTemplate=\"body\" let-cidade>\r\n            <tr>\r\n                <td>{{ cidade.id }}</td>\r\n                <td>{{ cidade.nome }}</td>\r\n                <td>{{ cidade.uf }}</td>\r\n                <td>{{ cidade.capital ? 'Sim' : 'Não' }}</td>\r\n\r\n                <td style=\"width: 250px\">\r\n                    <p-button\r\n                        (click)=\"abreJanelaParaAlterarCidade(cidade)\"\r\n                        label=\"Alterar\"\r\n                    ></p-button>\r\n                    &nbsp;\r\n                    <p-button\r\n                        (click)=\"excluir(cidade)\"\r\n                        label=\"Excluir\"\r\n                    ></p-button>\r\n                </td>\r\n            </tr>\r\n        </ng-template>\r\n    </p-table>\r\n\r\n    <p-button\r\n        (click)=\"abreJanelaParaCadastrarNovaCidade()\"\r\n        label=\"Nova Cidade\"\r\n    />\r\n\r\n    <!-- Janela para cadastro de cidade -->\r\n    <cadastrar-cidade\r\n        *ngIf=\"this.mostraJanelaCadastro\"\r\n        [cidade]=\"cidadeSelecionada\"\r\n        (onClose)=\"fechaJanelaCadastro($event)\"\r\n    ></cadastrar-cidade>\r\n</div>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}